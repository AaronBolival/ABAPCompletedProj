*$*$*****************************************************CATALOG_START**
*$*$    PROGRAM ID    : ZSD_RTVUPL_V1                                  *
*$*$    TCODE         :                                                *
*$*$    TITLE         : Puregold RTV Upload                            *
*$*$    CREATION DATE :                                                *
*$*$    CREATED BY    : Aaron John E. Bolival                          *
*$*$    OWNERSHIP     : [ADD OWNERSHIP COMMENTS HERE]                  *
*$*$    REFERENCE ID  : [ADD DOCUMENT REFERENCE ID HERE]               *
*$*$-------------------------------------------------------------------*
*$*$    DESCRIPTION   : Puregold RTV Upload                            *
*$*$                                                                   *
*$*$                                                                   *
*$*$********************************************************************

REPORT zsd_rtvupl_v1.

TABLES: zcusship, zcusshipf, zcusmat, zcusmatf,
        knb1.

"Structures
TYPES: BEGIN OF ts_excel,
        col1 TYPE string,
        col2 TYPE string,
        col3 TYPE string,
        col4 TYPE string,
        col5 TYPE string, "PO# / RTV#
        col6 TYPE string,
        col7 TYPE string,
        col8 TYPE string,
        col9 TYPE string,
        col10 TYPE string,
        col11 TYPE string,
        col12 TYPE string,
        col13 TYPE string,
        col14 TYPE string,
        col15 TYPE string,
        col16 TYPE string,
        col17 TYPE string,
        col18 TYPE string,
        col19 TYPE string,
        col20 TYPE string, "SHIPTO / CUSTOMER CODE
        col21 TYPE string,
        col22 TYPE string,
        col23 TYPE string,
        col24 TYPE string,
        col25 TYPE string,
        col26 TYPE string,
        col27 TYPE string,
        col28 TYPE string, "ITEM CODE
        col29 TYPE string,
        col30 TYPE string,
        col31 TYPE string,
        col32 TYPE string, "QTY
        col33 TYPE string,
        col34 TYPE string, " ORDER REASON
  END OF ts_excel.

TYPES: BEGIN OF ts_vbak,
  audat TYPE vbak-erdat,
  bstnk TYPE vbak-bstnk, "po
  bstdk TYPE vbak-bstdk, "po order date
  mahdt TYPE vbak-mahdt,
  auart TYPE vbak-auart, "doc type
  vkorg TYPE vbak-vkorg, "sales org
  vtweg TYPE vbak-vtweg, "dist channel
  soldt TYPE vbak-kunnr, "sold to
  shipt TYPE vbak-kunnr, "ship to
  vdatu TYPE vbak-vdatu, "req_date_h
  spart TYPE vbak-spart,
  vbtyp TYPE vbak-vbtyp,
  reason_code TYPE string,
  abrvw TYPE vbak-abrvw,
END OF ts_vbak.

TYPES: BEGIN OF ts_vbap,
  matnr TYPE vbap-matnr,
  posnr TYPE vbap-posnr,
  kwmeng TYPE vbap-kwmeng,
  werks TYPE vbap-werks,
  vkaus TYPE vbap-vkaus,
  END OF ts_vbap.

TYPES: BEGIN OF ts_error,
    row_num TYPE i,
    status TYPE string,
    filename TYPE string,
    errflag TYPE string,
    order TYPE string,
    details TYPE string,
  END OF ts_error.

TYPES: BEGIN OF ts_reason,
*    tabix type n,
    reason TYPE c LENGTH 255,
  END OF ts_reason.

DATA: gt_reason TYPE TABLE OF ts_reason,
      gv_reason TYPE ts_reason,
      gv_reason_str TYPE string,
      gv_get_reason_code TYPE tvau-augru,
      gv_reason_i TYPE i.

DATA : order_header_in LIKE bapisdhd1,
*       order_items_in like bapisditm occurs 0 with header line,
       return LIKE bapiret2 OCCURS 0 WITH HEADER LINE,
*       order_partners like bapiparnr occurs 0 with header line,
*       order_keys like bapisdkey occurs 0 with header line,
*       order_schedules_in like bapischdl occurs 0 with header line,
       salesdocument LIKE  bapivbeln-vbeln.

"other bapi
DATA:
*      gs_sales_header_in type bapisdhd1,
*      salesdocument type bapivbeln-vbeln,
*      return like bapiret2 occurs 0 with header line,
      it_sales_items_in TYPE STANDARD TABLE OF bapisditm,
      wa_sales_items_in TYPE bapisditm,
      it_sales_items_inx TYPE STANDARD TABLE OF bapisditmx,
      wa_sales_items_inx TYPE bapisditmx,
      it_sales_partners TYPE STANDARD TABLE OF bapiparnr,
      wa_sales_partners TYPE bapiparnr,
      it_sales_schedules_in TYPE STANDARD TABLE OF bapischdl,
      wa_sales_schedules_in TYPE bapischdl,
      wa_return_partners TYPE bapiparnr,
      it_return_partners TYPE STANDARD TABLE OF bapiparnr.

"Log
DATA: gv_log_doctype TYPE string.
TYPES: BEGIN OF ts_file_log,
  log TYPE string,
  END OF ts_file_log.
DATA: gt_file_log TYPE TABLE OF ts_file_log,
      gv_file_log TYPE ts_file_log.
"-----------------------------------------------------------------------
"Decaration
"-----------------------------------------------------------------------
"File
DATA: filetable TYPE filetable,
      rc TYPE i.

DATA: lv_e_path TYPE pc_path,
      lv_i_drive TYPE pc_drive,
      lv_i_extension TYPE string,
      lv_i_name TYPE string,
      lv_i_namewext TYPE string,
      lv_i_path TYPE pc_path.
DATA: lv_file TYPE localfile.
DATA: lt_raw TYPE truxs_t_text_data.
DATA: lv_file_extension TYPE c.

"internal tables , wa
DATA: gt_excel_temp   TYPE STANDARD TABLE OF ts_excel,
      gt_excel_header TYPE STANDARD TABLE OF ts_excel,
      gt_excel_item   TYPE STANDARD TABLE OF ts_excel,
      gt_excel        TYPE STANDARD TABLE OF ts_excel,
      gv_excel        TYPE ts_excel.
DATA: lt_kcd_csv      TYPE STANDARD TABLE OF  kcde_intern_struc WITH HEADER LINE,
      gv_index TYPE i.
FIELD-SYMBOLS: <fs>.

DATA: gt_zcusship   TYPE STANDARD TABLE OF zcusship,
      gv_zcusship   TYPE zcusship,
      gt_zcusshipf  TYPE STANDARD TABLE OF zcusshipf,
      gv_zcusshipf  TYPE zcusshipf,
      gt_zcusmat    TYPE STANDARD TABLE OF zcusmat,
      gv_zcusmat    TYPE zcusmat,
      gt_zcusmatf   TYPE STANDARD TABLE OF zcusmatf,
      gv_zcusmatf   TYPE zcusmatf.

DATA: gt_vbak TYPE STANDARD TABLE OF ts_vbak,
      gv_vbak TYPE ts_vbak,
      gt_vbap TYPE STANDARD TABLE OF ts_vbap,
      gv_vbap TYPE ts_vbap,
      gv_werks TYPE werks_ext,
      gv_auart TYPE vbak-auart,
      gv_zfds TYPE zcusship-zfds,
      gv_soldt TYPE kunag,
      gv_csmat TYPE string.
DATA: lv_csmat TYPE string.

DATA: gt_kotg501 TYPE TABLE OF kotg501,
      gv_kotg501 LIKE LINE OF gt_kotg501.
DATA: gt_kotg502 TYPE TABLE OF kotg502,
      gv_kotg502 LIKE LINE OF gt_kotg502.
DATA: gt_kotg503 TYPE TABLE OF kotg503,
      gv_kotg503 LIKE LINE OF gt_kotg503.
DATA: gt_kotg504 TYPE TABLE OF kotg504,
      gv_kotg504 LIKE LINE OF gt_kotg504.
DATA: gt_kotn010 TYPE TABLE OF kotn010,
      gv_kotn010 LIKE LINE OF gt_kotn010.
DATA: gt_kondn TYPE TABLE OF kondn,
      gv_kondn LIKE LINE OF gt_kondn.
DATA: lv_blocked(1) TYPE c.

DATA: lv_posnr(6) TYPE n.
DATA: gv_day TYPE i,
      gv_docday TYPE p,
      gv_endofmonth TYPE d.

DATA: lv_vbeln TYPE vbkd-vbeln,
      lv_bstkd TYPE vbkd-bstkd.

DATA: gt_error TYPE STANDARD TABLE OF ts_error,
      gv_error TYPE ts_error,
      gv_with_error TYPE c.

"TVARV Z_RTVUPL_DOCTYPE_NA01, Z_RTVUPL_DOCTYPE_NA02
DATA: gv_tvarv_doctyp1 TYPE tvarvc,
      gv_tvarv_doctyp2 TYPE tvarvc,
      gv_doctype TYPE vbak-auart.
CONSTANTS: gv_tvarv_name1 TYPE string VALUE 'ZSD_RTVUPL_DOCTYPE_NA01',
           gv_tvarv_name2 TYPE string VALUE 'ZSD_RTVUPL_DOCTYPE_NA02'.

"messages
DATA: lv_fileext_error TYPE string,
      gv_msginfo TYPE string.
"
DATA: lv_header TYPE c.
DATA: lv_doccat TYPE string.
DATA: lv_testrun TYPE c.


TYPES: BEGIN OF ts_cuttedpath,
  col1 TYPE c LENGTH 255,
  col2 TYPE sy-tabix,
  END OF ts_cuttedpath.
TYPES: BEGIN OF ts_cutpath,
  col1 TYPE c LENGTH 255,
  END OF ts_cutpath.
DATA: lv_pathlen TYPE i,
      lt_cutpath TYPE TABLE OF ts_cutpath,
      lv_cutpath LIKE LINE OF lt_cutpath,
      lt_cuttedpath TYPE TABLE OF ts_cuttedpath,
      lv_cuttedpath TYPE ts_cuttedpath.
" for TRINT_FILE_GET_EXTENSION
DATA: p_file_c TYPE c LENGTH 500,
      p_file_extension TYPE c LENGTH 5.


"start of block sapsupport4 abolival C-003198, 06.09.2023

TYPES: BEGIN OF ts_vbeln,
 vbeln TYPE vbak-vbeln,
END OF ts_vbeln.

TYPES: BEGIN OF ts_bstkd_m,
  vbeln   TYPE vbak-vbeln,
  bstkd_m TYPE vbkd-bstkd_m,
END OF ts_bstkd_m.

DATA: lv_vkorg_per_bukrs TYPE vbak-vkorg,
      lt_bstkd_temp TYPE TABLE OF ts_bstkd_m,
      lt_vbeln TYPE TABLE OF ts_vbeln,
      lv_bstkd_temp TYPE ts_bstkd_m.

SELECTION-SCREEN: BEGIN OF BLOCK sel_blk1 WITH FRAME.
PARAMETERS: p_bukrs TYPE bukrs OBLIGATORY.
PARAMETERS: p_file TYPE string OBLIGATORY."rlgrap-filename.
PARAMETERS: p_tvau TYPE tvau-augru OBLIGATORY.
PARAMETERS: p_abrvw TYPE tvlv-abrvw OBLIGATORY.
PARAMETERS: p_test AS CHECKBOX.
SELECTION-SCREEN: END OF BLOCK sel_blk1.

*$*$********************************************************************
*$*$    AT SELECTION                                          *
*$*$********************************************************************
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.

  CALL METHOD cl_gui_frontend_services=>file_open_dialog
    EXPORTING
      window_title            = 'Open File'
    CHANGING
      file_table              = filetable
      rc                      = rc
    EXCEPTIONS
      file_open_dialog_failed = 1
      cntl_error              = 2
      error_no_gui            = 3
      not_supported_by_gui    = 4
      OTHERS                  = 5.
  IF sy-subrc = 0.
    READ TABLE filetable INTO p_file INDEX 1.
  ENDIF.

AT SELECTION-SCREEN ON p_file.
  "Accepted file type should be csv  or xls.  | Checking of file extension
  lv_e_path = p_file.

  "-----------------------------------------------------------------------
  "get filename with extension

  lv_pathlen = strlen( p_file ).
  IF lv_pathlen > 128.
    MESSAGE 'Path length must not exceed 128 characters.' TYPE 'E'.
  ENDIF.

*  if lv_pathlen > 66.
  SPLIT p_file AT '\' INTO TABLE lt_cutpath.

  LOOP AT lt_cutpath INTO lv_cutpath.
    lv_cuttedpath-col1 = lv_cutpath-col1.
    lv_cuttedpath-col2 = sy-tabix.
    APPEND lv_cuttedpath TO lt_cuttedpath.
  ENDLOOP.

  SORT lt_cuttedpath BY col2 DESCENDING.

  CLEAR: lv_cutpath, lt_cutpath.
  READ TABLE lt_cuttedpath INTO lv_cuttedpath INDEX 1.
  IF sy-subrc = 0.
    lv_i_namewext = lv_cuttedpath-col1.
  ENDIF.
*  endif.
  "-----------------------------------------------------------------------
  "" this fm can hold up to 66 chars only
*  call function 'PC_SPLIT_COMPLETE_FILENAME'
*    EXPORTING
*      complete_filename =    lv_e_path
**      check_dos_format  =     " The file name to be split
*    IMPORTING
*      drive             = lv_i_drive
*      extension         = lv_i_extension "
*      name              = lv_i_name
*      name_with_ext     = lv_i_namewext "
**      path              = lv_i_path
*    EXCEPTIONS
*      invalid_drive     = 1
*      invalid_extension = 2
*      invalid_name      = 3
*      invalid_path      = 4
*      others            = 5
*    .
  "
  p_file_c = p_file.
  CALL FUNCTION 'TRINT_FILE_GET_EXTENSION'
    EXPORTING
      filename  = p_file_c
      uppercase = 'X'
    IMPORTING
      extension = p_file_extension.

  lv_i_extension = p_file_extension.

  IF ( lv_i_extension = 'xls' OR lv_i_extension = 'XLS' ) OR
*     ( lv_i_extension = 'xlsx' or lv_i_extension = 'XLSX' ) or
     ( lv_i_extension = 'csv' OR lv_i_extension = 'CSV' ).
  ELSE.
    lv_fileext_error = |File extension ".{ lv_i_extension }" is not allowed.|.
    MESSAGE lv_fileext_error TYPE 'E'.
  ENDIF.

AT SELECTION-SCREEN.
  IF p_bukrs <> 'NA01' AND p_bukrs <> 'NA02'.
    DATA: lv_bukrs_error TYPE string.
    lv_bukrs_error = |{ p_bukrs } is not allowed|.
    MESSAGE lv_bukrs_error TYPE 'E'.
  ENDIF.
*$*$********************************************************************
*$*$    START-OF-SELECTION                                             *
*$*$********************************************************************
START-OF-SELECTION.
  IF p_test = 'X'.
    lv_testrun = 'X'.
  ENDIF.

  "Upload file into internal table
  lv_file =  p_file.

  IF lv_i_extension = 'csv' OR lv_i_extension = 'CSV'.
    CALL FUNCTION 'KCD_CSV_FILE_TO_INTERN_CONVERT'
      EXPORTING
        i_filename      = lv_file
        i_separator     = ','
      TABLES
        e_intern        = lt_kcd_csv
      EXCEPTIONS
        upload_csv      = 1
        upload_filetype = 2.
    IF sy-subrc = 0.
      LOOP AT lt_kcd_csv.
        MOVE: lt_kcd_csv-col TO gv_index.
        ASSIGN COMPONENT gv_index OF STRUCTURE gv_excel TO <fs>.
        MOVE: lt_kcd_csv-value TO <fs>.
        AT END OF row.
          APPEND gv_excel TO gt_excel_temp.
          CLEAR gv_excel.
        ENDAT.
      ENDLOOP.
    ENDIF.
*
*     types: begin of ts_test,
*       col1 type c length 1000,
*       end of ts_test.
*       data: lt_test type table of ts_test.
*       data: lv_string type string.
*       lv_string = p_file.
*     call function 'GUI_UPLOAD'
*       EXPORTING
*         filename                =  p_file   " Name of file
*         filetype                = 'BIN'    " File Type (ASC or BIN)
*         has_field_separator     = ' '    " Columns Separated by Tabs in Case of ASCII Upload
*       TABLES
*         data_tab                =  lt_test
    .


  ELSE.
    CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
      EXPORTING
*       i_field_seperator    =
        i_line_header        = ' '
        i_tab_raw_data       = lt_raw
        i_filename           = lv_file
      TABLES
        i_tab_converted_data = gt_excel_temp
      EXCEPTIONS
        conversion_failed    = 1
        OTHERS               = 2.
  ENDIF.
*  delete gt_excel_temp index 1.
  IF gt_excel_temp IS INITIAL.
    MESSAGE 'The file is empty.' TYPE 'I' DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.

  IF p_bukrs = 'NA01'.
    SELECT SINGLE * FROM tvarvc
       INTO gv_tvarv_doctyp1
       WHERE name = gv_tvarv_name1.

    IF gv_tvarv_doctyp1 IS INITIAL.
      MESSAGE 'No Document type found in tvarv.' TYPE 'E'.
    ELSE.
      gv_doctype = gv_tvarv_doctyp1-low.
    ENDIF.
  ELSEIF p_bukrs = 'NA02'.
    SELECT SINGLE * FROM tvarvc
       INTO gv_tvarv_doctyp2
       WHERE name = gv_tvarv_name2.

    IF gv_tvarv_doctyp2 IS INITIAL.
      MESSAGE 'No Document type found in tvarv.' TYPE 'E'.
    ELSE.
      gv_doctype = gv_tvarv_doctyp2-low.
    ENDIF.
  ENDIF.

  gv_vbak-auart = gv_doctype.

  gv_log_doctype = gv_doctype.

  LOOP AT gt_excel_temp INTO gv_excel.
    IF lv_header IS INITIAL.
      gv_vbak-audat = sy-datum.      "Date now
      gv_vbak-bstnk = gv_excel-col5. "PO Num  col 1 in zposoup file
*      gv_vbak-bstdk = gv_excel-col3. "PO order date
*      gv_vbak-mahdt = gv_excel-col15.
      gv_reason_str = gv_excel-col34.

      lv_doccat = 'H'. "gv_excel-col31.

*      split gv_reason_str at ':' INTO table gt_reason.
*      loop at gt_reason into gv_reason where reason = 'reasonCode'.
*        gv_reason_i = sy-tabix.
*      endloop.
*
*      gv_reason_i = gv_reason_i + 1.
*      read table gt_reason into gv_reason index gv_reason_i.
*
*      if gv_reason-reason = 'D DAMAGED/FACTORY DEFECT'.
*        gv_get_reason_code = 'BDM'.
*      endif.
*      gv_vbak-reason_code = gv_get_reason_code.

      gv_vbak-reason_code = p_tvau.


      "-----------------------------------------------------------------------
      "NA01
      "-----------------------------------------------------------------------
      IF p_bukrs = 'NA01'.
        lv_vkorg_per_bukrs = '1000'.

        SELECT SINGLE kunnr werks auart zfds FROM zcusship INTO
          (gv_vbak-shipt,gv_werks,gv_auart,gv_zfds)
          WHERE zcscod = gv_excel-col20 " col 10 in zposoup file
            AND auart = gv_vbak-auart.

        IF sy-subrc = 0.
          "Header Level
*          if gv_zfds is initial.
          "----------------------------------------------------------------------- create log here
*          else.
          gv_day  = gv_zfds.

          CALL FUNCTION 'DAY_IN_WEEK'
            EXPORTING
              datum = gv_vbak-audat
            IMPORTING
              wotnr = gv_docday.

          IF gv_day LE gv_docday.
            ADD 7 TO gv_day.
          ENDIF.

          IF ( gv_day - gv_docday ) LT 2 OR ( ( gv_docday - gv_day ) EQ 2 AND gv_docday EQ 6 ).
            ADD 7 TO gv_day.
          ENDIF.

          gv_vbak-vdatu =  ( gv_day - gv_docday ) + gv_vbak-audat.


          DATA: lv_yymmdd TYPE i,
                lv_yymmdd_current TYPE i.

          lv_yymmdd_current = sy-datum.
          lv_yymmdd = gv_vbak-vdatu.

          IF lv_yymmdd < lv_yymmdd_current.
            CLEAR: gv_error.
            gv_error-errflag = 'ERROR'.
            gv_error-filename = lv_i_namewext.
            gv_error-details = 'Required delivery is past date'.

            APPEND gv_error TO gt_error.
            gv_with_error = 'X'.
          ENDIF.
*          endif.

          SELECT SINGLE a~kunnr
                        b~vkorg
                        b~vtweg
                        b~spart
          FROM kna1 AS a INNER JOIN
               knvp AS b
          ON a~kunnr = b~kunnr
          INTO (gv_vbak-soldt, gv_vbak-vkorg, gv_vbak-vtweg, gv_vbak-spart)
          WHERE a~ktokd = 'Z001'
            AND b~parvw = 'WE'
            AND b~kunn2 = gv_vbak-shipt .
          IF sy-subrc = 0.
            gv_soldt = gv_vbak-soldt.
            APPEND gv_vbak TO gt_vbak.

*            SELECT *
*             INTO CORRESPONDING FIELDS OF TABLE gt_kotn010
*             FROM kotn010
*             FOR ALL ENTRIES IN gt_vbak
*             WHERE vkorg EQ gt_vbak-vkorg
*               AND vtweg EQ gt_vbak-vtweg
*               AND kunnr EQ gt_vbak-soldt
*             .
*
*            SELECT *
*              INTO CORRESPONDING FIELDS OF TABLE gt_kondn
*              FROM kondn
*              FOR ALL ENTRIES IN gt_kotn010
*              WHERE knumh EQ gt_kotn010-knumh.
          ENDIF.

        ENDIF.

        PERFORM check_duplicate_po.

        lv_header = 'X'.
      ENDIF.
      "-----------------------------------------------------------------------
      "END of Header for NA02
      "-----------------------------------------------------------------------

      "-----------------------------------------------------------------------
      "FPGMC
      "-----------------------------------------------------------------------
      IF p_bukrs = 'NA02'.
        lv_vkorg_per_bukrs = '5000'.

        SELECT SINGLE kunnr werks auart FROM zcusshipf INTO
          (gv_vbak-shipt, gv_werks, gv_auart)
          WHERE zcscod = gv_excel-col20 " col 10 in zposoup file
            AND auart = gv_vbak-auart.
*      if sy-subrc = 0.
*        "----------------------------------------------------------------------- log here
*      else.
        "get end of the month
        CALL FUNCTION 'HR_JP_MONTH_BEGIN_END_DATE'
          EXPORTING
            iv_date             = sy-datum
          IMPORTING
*           ev_month_begin_date =     " Begin date of a month
            ev_month_end_date   = gv_endofmonth.   " End date of a month
        gv_vbak-vdatu = gv_endofmonth.

        SELECT SINGLE a~kunnr
                      b~vkorg
                      b~vtweg
                      b~spart
          FROM kna1 AS a INNER JOIN
               knvp AS b
          ON a~kunnr = b~kunnr
          INTO (gv_vbak-soldt, gv_vbak-vkorg, gv_vbak-vtweg, gv_vbak-spart)
          WHERE a~ktokd = 'Z005'
            AND b~parvw = 'WE'
            AND b~kunn2 = gv_vbak-shipt.
        IF sy-subrc = 0.
          gv_soldt = gv_vbak-soldt.
          APPEND gv_vbak TO gt_vbak.
        ENDIF.


        PERFORM check_duplicate_po.

        lv_header = 'X'.
*      endif.
      ENDIF.
    ENDIF. "endif of lv_header
    "-----------------------------------------------------------------------
    "END of Header for NA02
    "-----------------------------------------------------------------------

    "-----------------------------------------------------------------------
    "Check Duplicate PO
    "-----------------------------------------------------------------------
*    CLEAR: lv_vbeln, lv_bstkd.

    "start of block sapsupport4 abolival C-003198, 06.09.2023

*    IF p_bukrs = 'NA01'.
*      lv_vkorg_per_bukrs = '1000'.
*    ENDIF.
*    IF p_bukrs = 'NA02'.
*      lv_vkorg_per_bukrs = '5000'.
*    ENDIF.

    "end of block


*    SELECT SINGLE a~vbeln
*                  a~bstkd
*      INTO (lv_vbeln, lv_bstkd)
*      FROM vbkd AS a INNER JOIN
*           vbak AS b
*      ON a~vbeln = b~vbeln
*      WHERE  a~bstkd = gv_vbak-bstnk
*      AND a~posnr = space
*      AND b~auart = gv_vbak-auart
*      AND b~kunnr = gv_vbak-soldt
*      AND ( b~vkorg = '1000' OR b~vkorg = '5000' )
*      .

    "start of block sapsupport4 abolival C-003198, 06.09.2023
*    SELECT SINGLE a~vbeln
*                  a~bstkd
*      INTO (lv_vbeln, lv_bstkd)
*      FROM vbkd AS a INNER JOIN
*           vbak AS b
*      ON a~vbeln = b~vbeln
*      WHERE  a~bstkd_m = gv_vbak-bstnk "abolival 9/6/2023 bstkd_m in VA01 based on debug  bstkd in ZPOSOUP and RTV
*      AND a~posnr = space
*      AND b~auart = gv_vbak-auart
*      AND b~kunnr = gv_vbak-soldt
*      AND b~vkorg = lv_vkorg_per_bukrs
*      .

*      SELECT vbeln
*         FROM vbak
*         INTO CORRESPONDING FIELDS OF TABLE lt_vbeln
*         WHERE auart = gv_vbak-auart
*           AND kunnr = gv_vbak-soldt
*           AND vkorg = lv_vkorg_per_bukrs.
*
*      IF sy-subrc = 0.
*        SELECT bstkd_m vbeln
*          FROM vbkd
*          INTO CORRESPONDING FIELDS OF TABLE lt_bstkd_temp
*          FOR ALL ENTRIES IN lt_vbeln
*          WHERE vbeln   = lt_vbeln-vbeln
*           AND  bstkd_m = gv_vbak-bstnk
*           AND  posnr   = space.
*        .
*
*        IF sy-subrc = 0.
*          READ TABLE lt_bstkd_temp INTO lv_bstkd_temp INDEX 1.
*          IF sy-subrc = 0.
*            lv_vbeln = lv_bstkd_temp-vbeln.
*          ENDIF.
*        ENDIF.
*      ENDIF.


    "end of block

*    IF lt_bstkd_temp IS NOT INITIAL. "sy-subrc = 0. "with duplicate
*      "----------------------------------------------------------------------- create log here
*      CLEAR: gv_error.
*      gv_error-filename = lv_i_namewext.
*      gv_error-errflag = text-err.
*
*      CONCATENATE 'PO already exist' gv_vbak-bstnk 'SO:' lv_vbeln INTO gv_error-details SEPARATED BY space.
*
*      APPEND gv_error TO gt_error.
*      gv_with_error = 'X'.
*
*      CLEAR: lt_bstkd_temp.
*    ENDIF.


    "-----------------------------------------------------------------------
    "Item Level
    "-----------------------------------------------------------------------
    IF gv_with_error IS INITIAL.
      CLEAR: gv_vbap.
      gv_csmat = gv_excel-col28. "gv_excel-col19.

      SHIFT gv_csmat LEFT DELETING LEADING '0'.
      "-----------------------------------------------------------------------
      "NAI
      "-----------------------------------------------------------------------
      IF p_bukrs = 'NA01'.
        SELECT SINGLE matnr
          FROM zcusmat
          INTO gv_vbap-matnr
          WHERE kunnr = gv_soldt
            AND zcsmat = gv_csmat.
      ENDIF.
      "-----------------------------------------------------------------------
      "FPGMC
      "-----------------------------------------------------------------------
      IF p_bukrs = 'NA02'.
        SELECT SINGLE matnr
          FROM zcusmatf
          INTO gv_vbap-matnr
          WHERE kunnr = gv_soldt
            AND zcsmat = gv_csmat.
      ENDIF.
      "-----------------------------------------------------------------------
      "End
      "-----------------------------------------------------------------------

      "-----------------------------------------------------------------------
      "Checking for excluded material
      "-----------------------------------------------------------------------
      CLEAR: gv_kotg501.
      IF sy-subrc = 0.
        SELECT * FROM kotg501
          INTO TABLE gt_kotg501
          WHERE matnr = gv_vbap-matnr.

        IF sy-subrc = 0.
          LOOP AT gt_kotg501 INTO gv_kotg501.
            IF gv_vbak-audat  GE gv_kotg501-datab AND gv_vbak-audat LE gv_kotg501-datbi.
              lv_blocked = 'X'.
            ENDIF.
          ENDLOOP.
        ENDIF.
      ENDIF.

      CLEAR: gv_kotg502.
      SELECT * FROM kotg502
        INTO TABLE gt_kotg502
        WHERE matnr = gv_vbap-matnr.

      IF sy-subrc = 0.
        LOOP AT gt_kotg502 INTO gv_kotg502.
          IF gv_vbak-audat  GE gv_kotg502-datab AND gv_vbak-audat LE gv_kotg502-datbi.
            lv_blocked = 'X'.
          ENDIF.
        ENDLOOP.
      ENDIF.

      CLEAR: gt_kotg503.
      SELECT * FROM kotg503
        INTO TABLE gt_kotg503
        WHERE matnr = gv_vbap-matnr.

      IF sy-subrc = 0.
        LOOP AT gt_kotg503 INTO gv_kotg503.
          IF gv_vbak-audat  GE gv_kotg503-datab AND gv_vbak-audat LE gv_kotg503-datbi.
            lv_blocked = 'X'.
          ENDIF.
        ENDLOOP.
      ENDIF.

      CLEAR: gt_kotg504.
      SELECT * FROM kotg504
        INTO TABLE gt_kotg504
        WHERE matnr = gv_vbap-matnr.

      IF sy-subrc = 0.
        LOOP AT gt_kotg504 INTO gv_kotg504.
          IF gv_vbak-audat  GE gv_kotg504-datab AND gv_vbak-audat LE gv_kotg504-datbi.
            lv_blocked = 'X'.
          ENDIF.
        ENDLOOP.
      ENDIF.

      IF gv_vbap-matnr IS INITIAL.
        gv_error-filename = lv_i_namewext.
        gv_error-errflag = text-err.
        gv_msginfo = gv_soldt.
        CONCATENATE 'Material' gv_excel-col28 'Customer' gv_msginfo 'is not maintained' " 'is not maintained'
          INTO gv_error-details SEPARATED BY space.

        APPEND gv_error TO gt_error.
        gv_with_error = 'X'.
      ELSE.
        gv_error-filename = lv_i_namewext.
        gv_error-errflag = text-scs.
        gv_msginfo = gv_soldt.
        CONCATENATE 'Material' gv_excel-col28
          INTO gv_error-details SEPARATED BY space.

        APPEND gv_error TO gt_error.

      ENDIF.

      IF lv_blocked IS NOT INITIAL.
        "Create log here
        CLEAR: gv_error.
        gv_error-filename = lv_i_namewext.
        gv_error-errflag = text-err.

        CONCATENATE 'Material' gv_vbap-matnr 'has been excluded'
          INTO gv_error-details SEPARATED BY space.

        APPEND gv_error TO gt_error.
        gv_with_error = 'X'.
        CLEAR: lv_blocked.
      ENDIF.
      "-----------------------------------------------------------------------
      "End of checking for excluded material
      "-----------------------------------------------------------------------

      lv_posnr = lv_posnr + 10.

      gv_vbap-posnr = lv_posnr.
      gv_vbap-kwmeng = gv_excel-col32. "zposoup file col21.
      gv_vbap-werks = gv_werks.
      IF gv_vbap-kwmeng > 0.
        APPEND gv_vbap TO gt_vbap.
      ENDIF.

    ELSE. "gv_with_error = 'X'
      "Create log here
      CLEAR: gv_error.
      gv_error-filename = lv_i_namewext.
      gv_error-errflag = text-err.
      gv_msginfo = gv_soldt.
*        concatenate 'Material' gv_csmat 'Customer' gv_msginfo 'is not maintained'
*          into gv_error-details separated by space.
      CONCATENATE 'Material' gv_excel-col28 'Customer' gv_msginfo 'is not maintained'
        INTO gv_error-details SEPARATED BY space.

      APPEND gv_error TO gt_error.
      gv_with_error = 'X'.
    ENDIF.

    CLEAR: gv_zcusship, gv_zcusshipf, gv_zfds, gv_auart, gv_vbak,
           gv_day,gv_docday, gv_endofmonth.

  ENDLOOP.

  "-----------------------------------------------------------------------
  "Create Order
  "-----------------------------------------------------------------------
  DATA: lv_business_obj TYPE oj_name.
  IF lv_doccat = 'H' OR lv_doccat = 'h'.
    lv_business_obj = 'BUS2102'.
*  else.
*    lv_business_obj = 'BUS2096'.
  ENDIF.

  IF gv_with_error IS INITIAL.
    CLEAR: gv_vbak.
    DATA: lv_date TYPE sy-datum,
          lv_fgcnt TYPE n.

    READ TABLE gt_vbak INTO gv_vbak INDEX 1.
    "create log here

    "Checking Date field
    IF gv_vbak-audat IS INITIAL OR gv_vbak-vdatu IS INITIAL OR gv_vbak-vdatu < gv_vbak-audat.
      IF gv_vbak-audat IS INITIAL.
        CLEAR: gv_error.
        gv_error-filename = lv_i_namewext.
        gv_error-errflag = text-err.
        gv_error-details = 'Delivery Date is required'.

        APPEND gv_error TO gt_error.
        gv_with_error = 'X'.
      ENDIF.
      IF gv_vbak-vdatu < gv_vbak-audat.
        CLEAR: gv_error.
        gv_error-filename = lv_i_namewext.
        gv_error-errflag = text-err.
        gv_error-details = 'Order date should be earlier than Delivery Date'.

        APPEND gv_error TO gt_error.
        gv_with_error = 'X'.
      ENDIF.
      "end date field check
    ELSE.
      CLEAR: lv_date.
      lv_date = sy-datum + 60.
      IF gv_vbak-vdatu >= sy-datum AND gv_vbak-vdatu <= lv_date.

        gv_vbak-abrvw = p_abrvw.
        "-----------------------------------------------------------------------
        "SD_SALESDOCUMENT_CREATE
        order_header_in-doc_type = gv_vbak-auart.
        order_header_in-price_date = sy-datum.
        order_header_in-sales_org = gv_vbak-vkorg.
        order_header_in-distr_chan = gv_vbak-vtweg.
        order_header_in-req_date_h = gv_vbak-vdatu.
        order_header_in-doc_date = gv_vbak-audat.
        order_header_in-purch_no_c = gv_vbak-bstnk.
        order_header_in-ord_reason = gv_vbak-reason_code.
        order_header_in-dlvschduse = gv_vbak-abrvw.

        CLEAR: wa_sales_partners.
        wa_sales_partners-partn_role = 'WE'.
        wa_sales_partners-partn_numb = gv_vbak-shipt.
        APPEND wa_sales_partners TO it_sales_partners.

        CLEAR: wa_sales_partners.
        wa_sales_partners-partn_role = 'AG'.
        wa_sales_partners-partn_numb = gv_vbak-soldt.
        APPEND wa_sales_partners TO it_sales_partners.

        CLEAR: wa_return_partners.
        wa_return_partners-partn_role = 'WE'.
        wa_return_partners-partn_numb = gv_vbak-shipt.
        APPEND  wa_return_partners TO it_return_partners.

        CLEAR: wa_return_partners.
        wa_return_partners-partn_role = 'AG'.
        wa_return_partners-partn_numb = gv_vbak-soldt.
        APPEND  wa_return_partners TO it_return_partners.

        "Item level
        LOOP AT gt_vbap INTO gv_vbap.
          "-----------------------------------------------------------------------
          "Plant required
          "-----------------------------------------------------------------------
          IF gv_vbap-werks IS INITIAL.
            CLEAR: gv_error.
            gv_error-filename = lv_i_namewext.
            gv_error-errflag = text-err.
            gv_error-details = 'Plant is required'.

            APPEND gv_error TO gt_error.
            gv_with_error = 'X'.
          ELSE.

            gv_vbap-vkaus = p_abrvw.
            "-----------------------------------------------------------------------
            "SD_SALESDOCUMENT_CREATE
            CLEAR: wa_sales_items_in.
            wa_sales_items_in-itm_number =  gv_vbap-posnr + lv_fgcnt.
            wa_sales_items_in-material =  gv_vbap-matnr.
            wa_sales_items_in-plant =  gv_vbap-werks.
            wa_sales_items_in-target_qty =  gv_vbap-kwmeng.
            wa_sales_items_in-sales_unit = 'PC'.
            wa_sales_items_in-usage_ind = gv_vbap-vkaus.
            APPEND wa_sales_items_in TO it_sales_items_in.

            wa_sales_schedules_in-itm_number = gv_vbap-posnr + lv_fgcnt.
            wa_sales_schedules_in-req_qty   = gv_vbap-kwmeng.
            APPEND wa_sales_schedules_in  TO it_sales_schedules_in.

            "-----------------------------------------------------------------------
*            clear: gv_kotn010.
*            read table gt_kotn010 into gv_kotn010
*                 with key vkorg = gv_vbak-vkorg
*                          vtweg = gv_vbak-vtweg
*                          kunnr = gv_vbak-soldt
*                          matnr = gv_vbap-matnr.
*            if sy-subrc = 0.
*              clear: gv_kondn.
*              read table gt_kondn into gv_kondn with key knumh = gv_kotn010-knumh.
*
*              if sy-subrc = 0.
*                if gv_kondn-knrmm le gv_vbap-kwmeng.
*                  lv_fgcnt = lv_fgcnt + 10.
*                   order_items_in-itm_number = gv_vbap-posnr + lv_fgcnt.
*
*                    if gv_kondn-knrmat is initial.
*                      order_items_in-material = gv_vbap-matnr.
*                    else.
*                      order_items_in-material = gv_kondn-knrmat.
*                    endif.
*
*                    order_items_in-plant = gv_vbap-werks.
*                    append order_items_in.
*
*                    order_schedules_in-itm_number = gv_vbap-posnr + lv_fgcnt.
*                    order_schedules_in-req_qty = 0.
*                    append order_schedules_in.
*                endif.
*              endif.
*            endif.
          ENDIF.


        ENDLOOP.

      ELSE. "if gv_with_error = 'X'
        "Requested Delivery Date Error
        CLEAR: gv_error.
        gv_error-filename = lv_i_namewext.
        gv_error-errflag = text-err.
        gv_error-details = 'Invalid Requested Delivery Date'.

        APPEND gv_error TO gt_error.
        gv_with_error = 'X'.


      ENDIF.
    ENDIF.

    IF gv_with_error IS INITIAL.
      CALL FUNCTION 'SD_SALESDOCUMENT_CREATE'
        EXPORTING
          sales_header_in    = order_header_in
          business_object    = lv_business_obj "BUS2102 if document category is h
          testrun            = lv_testrun
        IMPORTING
          salesdocument_ex   = salesdocument
        TABLES
          return             = return
          sales_items_in     = it_sales_items_in
*         sales_items_inx    =  it_sales_items_inx"
          sales_partners     = it_sales_partners
          sales_schedules_in = it_sales_schedules_in.
      IF salesdocument <> space.
        IF lv_testrun <> 'X'.
          COMMIT WORK.
        ENDIF.
        CONCATENATE 'Order' salesdocument 'has been created' INTO gv_error-details SEPARATED BY space.
        gv_error-errflag = 'SUCCESS'.
        APPEND gv_error TO gt_error.
      ELSE.
        LOOP AT return.
          CLEAR: gv_error.
          gv_error-filename = lv_i_namewext.

          IF return-type = 'E'.
            gv_error-errflag = 'ERROR'.
          ELSEIF return-type = 'A'.
            gv_error-errflag = 'ABORT'.
          ELSEIF return-type = 'S'.
            gv_error-errflag = 'SUCCESS'.
          ELSEIF return-type = 'W'.
            gv_error-errflag = 'WARNING'.
          ELSEIF return-type = 'I'.
            gv_error-errflag = 'INFO'.
          ENDIF.
          gv_error-details = return-message.
          APPEND gv_error TO gt_error.
        ENDLOOP.
      ENDIF.
    ENDIF.

  ENDIF.


  "-----------------------------------------------------------------------
  "Display LOG
  "-----------------------------------------------------------------------

  CLEAR: gv_error.
  WRITE: 'Processing Log'.
  ULINE.
  WRITE: 'Filename: ', lv_i_namewext.
  NEW-LINE.
  WRITE: 'Company Code: ', p_bukrs.
  NEW-LINE.
  WRITE: 'Document Type: ', gv_log_doctype.
  NEW-LINE.
  SKIP 2.
  WRITE: sy-uline(100).
  NEW-LINE.
  WRITE: 'Status',10 'Error Flag', 25 'Details'.
  NEW-LINE.
  WRITE: sy-uline(100).
  NEW-LINE.

  gv_file_log-log = 'LOGS'.
  APPEND gv_file_log TO gt_file_log.
  gv_file_log-log = |Date:{ sy-datum }, Time:{ sy-uzeit }|.
  APPEND gv_file_log TO gt_file_log.

  LOOP AT gt_error INTO gv_error.
    IF gv_error-errflag = 'ERROR' OR gv_error-errflag = 'ABORT' .
      WRITE:/ icon_red_light AS ICON.
    ELSEIF gv_error-errflag = 'WARNING' .
      WRITE:/ icon_yellow_light AS ICON.
    ELSEIF gv_error-errflag = 'SUCCESS' OR gv_error-errflag = 'INFO' .
      WRITE:/ icon_green_light AS ICON.
    ENDIF.
    WRITE: 10 gv_error-errflag, 25 gv_error-details.
    NEW-LINE.

    gv_file_log-log = |{ gv_error-errflag } { gv_error-details }|.
    APPEND gv_file_log TO gt_file_log.
  ENDLOOP.

  "-----------------------------------------------------------------------
  " Download Log
  "-----------------------------------------------------------------------
  "default file path
  DATA: lv_filepath_log TYPE string.
  lv_filepath_log = |{ sy-datum }_{ sy-uzeit }logfile.txt|.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename = lv_filepath_log
      filetype = 'ASC'
    TABLES
      data_tab = gt_file_log.
*&---------------------------------------------------------------------*
*&      Form  CHECK_DUPLICATE_PO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_duplicate_po .
    "-----------------------------------------------------------------------
    "Check Duplicate PO
    "-----------------------------------------------------------------------

*      CLEAR: lv_vbeln, lv_bstkd.
*      SELECT vbeln
*         FROM vbak
*         INTO CORRESPONDING FIELDS OF TABLE lt_vbeln
*         WHERE auart = gv_vbak-auart
*           AND kunnr = gv_vbak-soldt
*           AND vkorg = lv_vkorg_per_bukrs.
*
*      IF sy-subrc = 0.
*        SELECT bstkd_m vbeln
*          FROM vbkd
*          INTO CORRESPONDING FIELDS OF TABLE lt_bstkd_temp
*          FOR ALL ENTRIES IN lt_vbeln
*          WHERE vbeln   = lt_vbeln-vbeln
*           AND  bstkd_m = gv_vbak-bstnk
*           AND  posnr   = space.
*        .
*
*        IF sy-subrc = 0.
*          READ TABLE lt_bstkd_temp INTO lv_bstkd_temp INDEX 1.
*          IF sy-subrc = 0.
*            lv_vbeln = lv_bstkd_temp-vbeln.
*          ENDIF.
*        ENDIF.
*      ENDIF.

      "start of change sapsupport4 abolival C-003198, 18.10.2023 " Same logic from Standard VA01
      SELECT SINGLE a~vbeln
                  a~bstkd
      INTO (lv_vbeln, lv_bstkd)
      FROM vbkd AS a INNER JOIN
           vbak AS b
      ON a~vbeln = b~vbeln
      WHERE  a~bstkd_m = gv_vbak-bstnk
      AND a~posnr = space
      AND b~auart = gv_vbak-auart
      AND b~kunnr = gv_vbak-soldt
      AND b~vkorg = lv_vkorg_per_bukrs.
      "End of change

*    IF lt_bstkd_temp IS NOT INITIAL. "sy-subrc = 0. "with duplicate
     IF sy-subrc = 0.
      "----------------------------------------------------------------------- create log here
      CLEAR: gv_error.
      gv_error-filename = lv_i_namewext.
      gv_error-errflag = text-err.

      CONCATENATE 'PO already exist' gv_vbak-bstnk 'SO:' lv_vbeln INTO gv_error-details SEPARATED BY space.

      APPEND gv_error TO gt_error.
      gv_with_error = 'X'.

      CLEAR: lt_bstkd_temp.
    ENDIF.
ENDFORM.                    " CHECK_DUPLICATE_PO
